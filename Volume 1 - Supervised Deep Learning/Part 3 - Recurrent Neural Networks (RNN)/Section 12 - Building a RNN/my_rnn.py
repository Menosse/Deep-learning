# -*- coding: utf-8 -*-
"""myrnn.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1s_9OPysehaIbDNjgHSXBbW6cuNt206oV

Import libs
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.preprocessing import MinMaxScaler
from keras.models import Sequential
from keras.layers import Dense
from keras.layers import LSTM
from keras.layers import Dropout

numberOfSteps = 120
numberOfNeurons = 100
dropoutRate = 0.2
denseUnits = 1
opt = "adam"
lossFunction = "mean_squared_error"

"""Import train data"""

dataset_train = pd.read_csv('/content/drive/My Drive/Colab Notebooks/rnn/Google_Stock_Price_Train.csv')
training_set = dataset_train.iloc[:, 1:2].values

"""Feature scailing"""

sc = MinMaxScaler(feature_range=(0,1))
training_set_scaled = sc.fit_transform(training_set)

"""Create 60 timesteps and 1 output"""

X_train = []
y_train = []
for i in range(numberOfSteps, len(training_set_scaled)):
  X_train.append(training_set_scaled[i-numberOfSteps:i, 0])
  y_train.append(training_set_scaled[i, 0])
X_train, y_train = np.array(X_train), np.array(y_train)

"""Reshaping"""

X_train = np.reshape(X_train,(X_train.shape[0], X_train.shape[1], 1))

"""Building RNN - Stacked LSTM /
Initialize RNN
"""

# Initialize RNN and first LSTM layer
regressor = Sequential()
regressor.add(LSTM(units=numberOfNeurons, return_sequences=True, input_shape=(X_train.shape[1],1)))
regressor.add(Dropout(dropoutRate))

# Add second LSTM with Dropout regularization
regressor.add(LSTM(units=numberOfNeurons, return_sequences=True))
regressor.add(Dropout(dropoutRate))

# Add third LSTM with Dropout regularization
regressor.add(LSTM(units=numberOfNeurons, return_sequences=True))
regressor.add(Dropout(dropoutRate))

# Add forth LSTM with Dropout regularization
regressor.add(LSTM(units=numberOfNeurons, return_sequences=True))
regressor.add(Dropout(dropoutRate))

# Add fifth LSTM with Dropout regularization
regressor.add(LSTM(units=numberOfNeurons, return_sequences=False))
regressor.add(Dropout(dropoutRate))

# Add output layer
regressor.add(Dense(units=denseUnits))

# Compiling the RNN
regressor.compile(optimizer=opt, loss=lossFunction)

"""Fitting the RNN regressor to the training set"""

regressor.fit(X_train, y_train, epochs=100, batch_size=32)

"""Making predictions and visualizing"""

# Import test set
dataset_test = pd.read_csv('/content/drive/My Drive/Colab Notebooks/rnn/Google_Stock_Price_Test.csv')
real_stock_price = dataset_test.iloc[:, 1:2].values
# Predict the stock price of 2017
# Concatenate training + test set
dataset_total = pd.concat((dataset_train['Open'],dataset_test['Open']), axis=0)
inputs = dataset_total[len(dataset_total) - len(dataset_test) - numberOfSteps:].values
inputs = inputs.reshape(-1,1)
inputs = sc.transform(inputs)

X_test = []
for i in range(numberOfSteps, len(inputs)):
  X_test.append(inputs[i-numberOfSteps:i, 0])
X_test = np.array(X_test)

X_test = np.reshape(X_test,(X_test.shape[0], X_test.shape[1], 1))
predicted_stock_price = regressor.predict(X_test)
predicted_stock_price = sc.inverse_transform(predicted_stock_price)

"""Plot the Results"""

# Using plt to plot the chart
plt.plot(real_stock_price, color= "red", label="Real Goodle Stock Price")
plt.plot(predicted_stock_price, color= "blue", label="Predicted Goodle Stock Price")
plt.title("Google Stock Price prediction")
plt.xlabel("Time")
plt.ylabel("Google Stock price")
plt.legend()
plt.show()